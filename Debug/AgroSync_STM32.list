
AgroSync_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080043e0  080043e0  000053e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000014  08004424  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004424  00006344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d183  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d03  00000000  00000000  000131c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00014ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fc  00000000  00000000  00015b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001656f  00000000  00000000  0001657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd4e  00000000  00000000  0002caeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef63  00000000  00000000  0003a839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c979c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  000c97e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000ccda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043c8 	.word	0x080043c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080043c8 	.word	0x080043c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 f81f 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8cb 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f9f5 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 f9cb 	bl	80008b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f99f 	bl	800085c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800051e:	f000 f92b 	bl	8000778 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000522:	f000 f977 	bl	8000814 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bufferRx, buffer_size);
 8000526:	2228      	movs	r2, #40	@ 0x28
 8000528:	4951      	ldr	r1, [pc, #324]	@ (8000670 <main+0x16c>)
 800052a:	4852      	ldr	r0, [pc, #328]	@ (8000674 <main+0x170>)
 800052c:	f003 f8db 	bl	80036e6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_ENABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8000530:	4b50      	ldr	r3, [pc, #320]	@ (8000674 <main+0x170>)
 8000532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b4e      	ldr	r3, [pc, #312]	@ (8000674 <main+0x170>)
 800053a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0208 	orr.w	r2, r2, #8
 8000542:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8000544:	484c      	ldr	r0, [pc, #304]	@ (8000678 <main+0x174>)
 8000546:	f002 fc0f 	bl	8002d68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 800054a:	484c      	ldr	r0, [pc, #304]	@ (800067c <main+0x178>)
 800054c:	f002 fbb2 	bl	8002cb4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Verifica se parou a interrupção de sinal dos sensores para zerar
		for (int i = 0; i < 16; i++) {
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e010      	b.n	8000578 <main+0x74>
			if (cont_zero[i] > 500) {
 8000556:	4a4a      	ldr	r2, [pc, #296]	@ (8000680 <main+0x17c>)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000562:	d906      	bls.n	8000572 <main+0x6e>
				freq[i] = 0;
 8000564:	4a47      	ldr	r2, [pc, #284]	@ (8000684 <main+0x180>)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	f04f 0200 	mov.w	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 16; i++) {
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	2b0f      	cmp	r3, #15
 800057c:	ddeb      	ble.n	8000556 <main+0x52>
			}
		}
		// Envio da frequencia de semente
		if (cont_send_freq > temp_send_freq) {
 800057e:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <main+0x184>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b42      	ldr	r3, [pc, #264]	@ (800068c <main+0x188>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d93e      	bls.n	8000608 <main+0x104>
			for (int i = 0; i < 16; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e030      	b.n	80005f2 <main+0xee>
				// 1) escala e arredonda
				float frq = freq[i] * 100.0f;
 8000590:	4a3c      	ldr	r2, [pc, #240]	@ (8000684 <main+0x180>)
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4413      	add	r3, r2
 8000598:	edd3 7a00 	vldr	s15, [r3]
 800059c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000690 <main+0x18c>
 80005a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a4:	edc7 7a01 	vstr	s15, [r7, #4]
				long frqr = lroundf(frq);
 80005a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80005ac:	f003 fede 	bl	800436c <lroundf>
 80005b0:	60f8      	str	r0, [r7, #12]
				// 2) satura no range de 16 bits sem sinal
				if (frqr < 0)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da01      	bge.n	80005bc <main+0xb8>
					frqr = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
				if (frqr > 65535L)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80005c2:	db02      	blt.n	80005ca <main+0xc6>
					frqr = 65535L;
 80005c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c8:	60fb      	str	r3, [r7, #12]

				uint16_t send_frq = (uint16_t) frqr;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	807b      	strh	r3, [r7, #2]

				freq_SD[2 * i] = (uint8_t) ((send_frq >> 8) & 0xFF);
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b2d1      	uxtb	r1, r2
 80005da:	4a2e      	ldr	r2, [pc, #184]	@ (8000694 <main+0x190>)
 80005dc:	54d1      	strb	r1, [r2, r3]
				freq_SD[2 * i + 1] = (uint8_t) (send_frq & 0xFF);
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	3301      	adds	r3, #1
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	b2d1      	uxtb	r1, r2
 80005e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000694 <main+0x190>)
 80005ea:	54d1      	strb	r1, [r2, r3]
			for (int i = 0; i < 16; i++) {
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	3301      	adds	r3, #1
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	ddcb      	ble.n	8000590 <main+0x8c>
			}

			cont_send_freq = 0; // reset de contagem para novo envio
 80005f8:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <main+0x184>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
			send_uart_TX(2, 32, freq_SD);
 80005fe:	4a25      	ldr	r2, [pc, #148]	@ (8000694 <main+0x190>)
 8000600:	2120      	movs	r1, #32
 8000602:	2002      	movs	r0, #2
 8000604:	f000 fcea 	bl	8000fdc <send_uart_TX>
		}
		// envio da contagem de semente para média
		if (cont_send_seed > temp_send_seed) {
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <main+0x194>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b23      	ldr	r3, [pc, #140]	@ (800069c <main+0x198>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d99d      	bls.n	8000550 <main+0x4c>
			for (int i = 0; i < N_sense; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e01e      	b.n	8000658 <main+0x154>

				cont_seed_SD[2 * i] = (uint8_t) ((cont_seed[i] >> 8) & 0xFF);
 800061a:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <main+0x19c>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	b29b      	uxth	r3, r3
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29a      	uxth	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	b2d1      	uxtb	r1, r2
 800062e:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <main+0x1a0>)
 8000630:	54d1      	strb	r1, [r2, r3]
				cont_seed_SD[2 * i + 1] = (uint8_t) (cont_seed[i] & 0xFF);
 8000632:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <main+0x19c>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	b29a      	uxth	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	3301      	adds	r3, #1
 8000642:	b2d1      	uxtb	r1, r2
 8000644:	4a17      	ldr	r2, [pc, #92]	@ (80006a4 <main+0x1a0>)
 8000646:	54d1      	strb	r1, [r2, r3]

				//zerar após converter para envio
				cont_seed[i] = 0;
 8000648:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <main+0x19c>)
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	2100      	movs	r1, #0
 800064e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < N_sense; i++) {
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	3301      	adds	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b0f      	cmp	r3, #15
 800065c:	dddd      	ble.n	800061a <main+0x116>
			}
			cont_send_seed = 0; // reset de contagem do timer de envio
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <main+0x194>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
			send_uart_TX(1, 32, cont_seed_SD);
 8000664:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <main+0x1a0>)
 8000666:	2120      	movs	r1, #32
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fcb7 	bl	8000fdc <send_uart_TX>
		for (int i = 0; i < 16; i++) {
 800066e:	e76f      	b.n	8000550 <main+0x4c>
 8000670:	200002f0 	.word	0x200002f0
 8000674:	200000c0 	.word	0x200000c0
 8000678:	20000078 	.word	0x20000078
 800067c:	20000030 	.word	0x20000030
 8000680:	200002b0 	.word	0x200002b0
 8000684:	20000208 	.word	0x20000208
 8000688:	200002ac 	.word	0x200002ac
 800068c:	20000004 	.word	0x20000004
 8000690:	42c80000 	.word	0x42c80000
 8000694:	20000248 	.word	0x20000248
 8000698:	200002a8 	.word	0x200002a8
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000268 	.word	0x20000268
 80006a4:	20000288 	.word	0x20000288

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fe2c 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a26      	ldr	r2, [pc, #152]	@ (8000770 <SystemClock_Config+0xc8>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <SystemClock_Config+0xcc>)
 80006f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800071c:	2364      	movs	r3, #100	@ 0x64
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fe19 	bl	8002364 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 fd06 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f87b 	bl	8002854 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000764:	f000 fcf0 	bl	8001148 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	@ 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_TIM5_Init+0x94>)
 8000796:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <MX_TIM5_Init+0x98>)
 8000798:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM5_Init+0x94>)
 800079c:	2263      	movs	r2, #99	@ 0x63
 800079e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_TIM5_Init+0x94>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_TIM5_Init+0x94>)
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM5_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_TIM5_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_TIM5_Init+0x94>)
 80007bc:	f002 fa2a 	bl	8002c14 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 fcbf 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_TIM5_Init+0x94>)
 80007d8:	f002 fc18 	bl	800300c <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fcb1 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_TIM5_Init+0x94>)
 80007f4:	f002 fe1a 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80007fe:	f000 fca3 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000030 	.word	0x20000030
 8000810:	40000c00 	.word	0x40000c00

08000814 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_TIM10_Init+0x40>)
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <MX_TIM10_Init+0x44>)
 800081c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <MX_TIM10_Init+0x40>)
 8000820:	2263      	movs	r2, #99	@ 0x63
 8000822:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_TIM10_Init+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <MX_TIM10_Init+0x40>)
 800082c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000830:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_TIM10_Init+0x40>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_TIM10_Init+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_TIM10_Init+0x40>)
 8000840:	f002 f9e8 	bl	8002c14 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800084a:	f000 fc7d 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000078 	.word	0x20000078
 8000858:	40014400 	.word	0x40014400

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART1_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART1_UART_Init+0x4c>)
 8000894:	f002 fe4c 	bl	8003530 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 fc53 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	40011000 	.word	0x40011000

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_DMA_Init+0x4c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <MX_DMA_Init+0x4c>)
 80008c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_DMA_Init+0x4c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	203a      	movs	r0, #58	@ 0x3a
 80008d8:	f000 ff85 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008dc:	203a      	movs	r0, #58	@ 0x3a
 80008de:	f000 ff9e 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2046      	movs	r0, #70	@ 0x46
 80008e8:	f000 ff7d 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008ec:	2046      	movs	r0, #70	@ 0x46
 80008ee:	f000 ff96 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b47      	ldr	r3, [pc, #284]	@ (8000a38 <MX_GPIO_Init+0x138>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a46      	ldr	r2, [pc, #280]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a38 <MX_GPIO_Init+0x138>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a38      	ldr	r2, [pc, #224]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a31      	ldr	r2, [pc, #196]	@ (8000a38 <MX_GPIO_Init+0x138>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <MX_GPIO_Init+0x138>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : SENSOR1_Pin SENSOR2_Pin SENSOR3_Pin SENSOR12_Pin
                           SENSOR15_Pin SENSOR16_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR12_Pin
 8000986:	f64c 0307 	movw	r3, #51207	@ 0xc807
 800098a:	617b      	str	r3, [r7, #20]
                          |SENSOR15_Pin|SENSOR16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4827      	ldr	r0, [pc, #156]	@ (8000a3c <MX_GPIO_Init+0x13c>)
 800099e:	f001 fb45 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR11_Pin SENSOR13_Pin SENSOR14_Pin SENSOR4_Pin
                           SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR8_Pin
                           SENSOR9_Pin SENSOR10_Pin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR13_Pin|SENSOR14_Pin|SENSOR4_Pin
 80009a2:	f243 73f8 	movw	r3, #14328	@ 0x37f8
 80009a6:	617b      	str	r3, [r7, #20]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin
                          |SENSOR9_Pin|SENSOR10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4821      	ldr	r0, [pc, #132]	@ (8000a40 <MX_GPIO_Init+0x140>)
 80009ba:	f001 fb37 	bl	800202c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2006      	movs	r0, #6
 80009c4:	f000 ff0f 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c8:	2006      	movs	r0, #6
 80009ca:	f000 ff28 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 ff07 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d8:	2007      	movs	r0, #7
 80009da:	f000 ff20 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2008      	movs	r0, #8
 80009e4:	f000 feff 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009e8:	2008      	movs	r0, #8
 80009ea:	f000 ff18 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2009      	movs	r0, #9
 80009f4:	f000 fef7 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009f8:	2009      	movs	r0, #9
 80009fa:	f000 ff10 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 feef 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 ff08 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2017      	movs	r0, #23
 8000a14:	f000 fee7 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a18:	2017      	movs	r0, #23
 8000a1a:	f000 ff00 	bl	800181e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2028      	movs	r0, #40	@ 0x28
 8000a24:	f000 fedf 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a28:	2028      	movs	r0, #40	@ 0x28
 8000a2a:	f000 fef8 	bl	800181e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	@ 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == SENSOR1_Pin) {
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d112      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x36>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[0] = 0;
 8000a54:	4ba0      	ldr	r3, [pc, #640]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		cont_seed[0]++;
 8000a5a:	4ba0      	ldr	r3, [pc, #640]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b9d      	ldr	r3, [pc, #628]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000a66:	801a      	strh	r2, [r3, #0]
		freq[0] = FreqCalculate(0, &htim5);
 8000a68:	499d      	ldr	r1, [pc, #628]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f96c 	bl	8000d48 <FreqCalculate>
 8000a70:	eef0 7a40 	vmov.f32	s15, s0
 8000a74:	4b9b      	ldr	r3, [pc, #620]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000a76:	edc3 7a00 	vstr	s15, [r3]
	}
	if (GPIO_Pin == SENSOR2_Pin) {
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d112      	bne.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x62>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[1] = 0;
 8000a80:	4b95      	ldr	r3, [pc, #596]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
		cont_seed[1]++;
 8000a86:	4b95      	ldr	r3, [pc, #596]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000a88:	885b      	ldrh	r3, [r3, #2]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b92      	ldr	r3, [pc, #584]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000a92:	805a      	strh	r2, [r3, #2]
		freq[1] = FreqCalculate(1, &htim5);
 8000a94:	4992      	ldr	r1, [pc, #584]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 f956 	bl	8000d48 <FreqCalculate>
 8000a9c:	eef0 7a40 	vmov.f32	s15, s0
 8000aa0:	4b90      	ldr	r3, [pc, #576]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000aa2:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if (GPIO_Pin == SENSOR3_Pin) {
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d112      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x8e>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[2] = 0;
 8000aac:	4b8a      	ldr	r3, [pc, #552]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
		cont_seed[2]++;
 8000ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	4b87      	ldr	r3, [pc, #540]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000abe:	809a      	strh	r2, [r3, #4]
		freq[2] = FreqCalculate(2, &htim5);
 8000ac0:	4987      	ldr	r1, [pc, #540]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f000 f940 	bl	8000d48 <FreqCalculate>
 8000ac8:	eef0 7a40 	vmov.f32	s15, s0
 8000acc:	4b85      	ldr	r3, [pc, #532]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000ace:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (GPIO_Pin == SENSOR4_Pin) {
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d112      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0xba>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[3] = 0;
 8000ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
		cont_seed[3]++;
 8000ade:	4b7f      	ldr	r3, [pc, #508]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000ae0:	88db      	ldrh	r3, [r3, #6]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000aea:	80da      	strh	r2, [r3, #6]
		freq[3] = FreqCalculate(3, &htim5);
 8000aec:	497c      	ldr	r1, [pc, #496]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f92a 	bl	8000d48 <FreqCalculate>
 8000af4:	eef0 7a40 	vmov.f32	s15, s0
 8000af8:	4b7a      	ldr	r3, [pc, #488]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000afa:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if (GPIO_Pin == SENSOR5_Pin) {
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	2b10      	cmp	r3, #16
 8000b02:	d112      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0xe6>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[4] = 0;
 8000b04:	4b74      	ldr	r3, [pc, #464]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
		cont_seed[4]++;
 8000b0a:	4b74      	ldr	r3, [pc, #464]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b0c:	891b      	ldrh	r3, [r3, #8]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b71      	ldr	r3, [pc, #452]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b16:	811a      	strh	r2, [r3, #8]
		freq[4] = FreqCalculate(4, &htim5);
 8000b18:	4971      	ldr	r1, [pc, #452]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f000 f914 	bl	8000d48 <FreqCalculate>
 8000b20:	eef0 7a40 	vmov.f32	s15, s0
 8000b24:	4b6f      	ldr	r3, [pc, #444]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000b26:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if (GPIO_Pin == SENSOR6_Pin) {
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	2b20      	cmp	r3, #32
 8000b2e:	d112      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x112>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[5] = 0;
 8000b30:	4b69      	ldr	r3, [pc, #420]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
		cont_seed[5]++;
 8000b36:	4b69      	ldr	r3, [pc, #420]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b38:	895b      	ldrh	r3, [r3, #10]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b66      	ldr	r3, [pc, #408]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b42:	815a      	strh	r2, [r3, #10]
		freq[5] = FreqCalculate(5, &htim5);
 8000b44:	4966      	ldr	r1, [pc, #408]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000b46:	2005      	movs	r0, #5
 8000b48:	f000 f8fe 	bl	8000d48 <FreqCalculate>
 8000b4c:	eef0 7a40 	vmov.f32	s15, s0
 8000b50:	4b64      	ldr	r3, [pc, #400]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000b52:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (GPIO_Pin == SENSOR7_Pin) {
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b40      	cmp	r3, #64	@ 0x40
 8000b5a:	d112      	bne.n	8000b82 <HAL_GPIO_EXTI_Callback+0x13e>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[6] = 0;
 8000b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
		cont_seed[6]++;
 8000b62:	4b5e      	ldr	r3, [pc, #376]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b64:	899b      	ldrh	r3, [r3, #12]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b6e:	819a      	strh	r2, [r3, #12]
		freq[6] = FreqCalculate(6, &htim5);
 8000b70:	495b      	ldr	r1, [pc, #364]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000b72:	2006      	movs	r0, #6
 8000b74:	f000 f8e8 	bl	8000d48 <FreqCalculate>
 8000b78:	eef0 7a40 	vmov.f32	s15, s0
 8000b7c:	4b59      	ldr	r3, [pc, #356]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000b7e:	edc3 7a06 	vstr	s15, [r3, #24]
	}
	if (GPIO_Pin == SENSOR8_Pin) {
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	2b80      	cmp	r3, #128	@ 0x80
 8000b86:	d112      	bne.n	8000bae <HAL_GPIO_EXTI_Callback+0x16a>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[7] = 0;
 8000b88:	4b53      	ldr	r3, [pc, #332]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
		cont_seed[7]++;
 8000b8e:	4b53      	ldr	r3, [pc, #332]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b90:	89db      	ldrh	r3, [r3, #14]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	3301      	adds	r3, #1
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b50      	ldr	r3, [pc, #320]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000b9a:	81da      	strh	r2, [r3, #14]
		freq[7] = FreqCalculate(7, &htim5);
 8000b9c:	4950      	ldr	r1, [pc, #320]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 f8d2 	bl	8000d48 <FreqCalculate>
 8000ba4:	eef0 7a40 	vmov.f32	s15, s0
 8000ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000baa:	edc3 7a07 	vstr	s15, [r3, #28]
	}
	if (GPIO_Pin == SENSOR9_Pin) {
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bb4:	d112      	bne.n	8000bdc <HAL_GPIO_EXTI_Callback+0x198>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[8] = 0;
 8000bb6:	4b48      	ldr	r3, [pc, #288]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
		cont_seed[8]++;
 8000bbc:	4b47      	ldr	r3, [pc, #284]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000bbe:	8a1b      	ldrh	r3, [r3, #16]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b45      	ldr	r3, [pc, #276]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000bc8:	821a      	strh	r2, [r3, #16]
		freq[8] = FreqCalculate(8, &htim5);
 8000bca:	4945      	ldr	r1, [pc, #276]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f000 f8bb 	bl	8000d48 <FreqCalculate>
 8000bd2:	eef0 7a40 	vmov.f32	s15, s0
 8000bd6:	4b43      	ldr	r3, [pc, #268]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000bd8:	edc3 7a08 	vstr	s15, [r3, #32]
	}
	if (GPIO_Pin == SENSOR10_Pin) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000be2:	d112      	bne.n	8000c0a <HAL_GPIO_EXTI_Callback+0x1c6>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[9] = 0;
 8000be4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
		cont_seed[9]++;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000bec:	8a5b      	ldrh	r3, [r3, #18]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000bf6:	825a      	strh	r2, [r3, #18]
		freq[9] = FreqCalculate(9, &htim5);
 8000bf8:	4939      	ldr	r1, [pc, #228]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000bfa:	2009      	movs	r0, #9
 8000bfc:	f000 f8a4 	bl	8000d48 <FreqCalculate>
 8000c00:	eef0 7a40 	vmov.f32	s15, s0
 8000c04:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000c06:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	if (GPIO_Pin == SENSOR11_Pin) {
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c10:	d112      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0x1f4>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[10] = 0;
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
		cont_seed[10]++;
 8000c18:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c1a:	8a9b      	ldrh	r3, [r3, #20]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c24:	829a      	strh	r2, [r3, #20]
		freq[10] = FreqCalculate(10, &htim5);
 8000c26:	492e      	ldr	r1, [pc, #184]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f000 f88d 	bl	8000d48 <FreqCalculate>
 8000c2e:	eef0 7a40 	vmov.f32	s15, s0
 8000c32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000c34:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}
	if (GPIO_Pin == SENSOR12_Pin) {
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c3e:	d112      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0x222>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[11] = 0;
 8000c40:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
		cont_seed[11]++;
 8000c46:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c48:	8adb      	ldrh	r3, [r3, #22]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c52:	82da      	strh	r2, [r3, #22]
		freq[11] = FreqCalculate(11, &htim5);
 8000c54:	4922      	ldr	r1, [pc, #136]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000c56:	200b      	movs	r0, #11
 8000c58:	f000 f876 	bl	8000d48 <FreqCalculate>
 8000c5c:	eef0 7a40 	vmov.f32	s15, s0
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000c62:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	if (GPIO_Pin == SENSOR13_Pin) {
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c6c:	d112      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x250>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[12] = 0;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	@ 0x30
		cont_seed[12]++;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c76:	8b1b      	ldrh	r3, [r3, #24]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000c80:	831a      	strh	r2, [r3, #24]
		freq[12] = FreqCalculate(12, &htim5);
 8000c82:	4917      	ldr	r1, [pc, #92]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000c84:	200c      	movs	r0, #12
 8000c86:	f000 f85f 	bl	8000d48 <FreqCalculate>
 8000c8a:	eef0 7a40 	vmov.f32	s15, s0
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000c90:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}
	if (GPIO_Pin == SENSOR14_Pin) {
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c9a:	d112      	bne.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x27e>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[13] = 0;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
		cont_seed[13]++;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000ca4:	8b5b      	ldrh	r3, [r3, #26]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000cae:	835a      	strh	r2, [r3, #26]
		freq[13] = FreqCalculate(13, &htim5);
 8000cb0:	490b      	ldr	r1, [pc, #44]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000cb2:	200d      	movs	r0, #13
 8000cb4:	f000 f848 	bl	8000d48 <FreqCalculate>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000cbe:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	}
	if (GPIO_Pin == SENSOR15_Pin) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cc8:	d11b      	bne.n	8000d02 <HAL_GPIO_EXTI_Callback+0x2be>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[14] = 0;
 8000cca:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	@ 0x38
		cont_seed[14]++;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x298>)
 8000cd2:	8b9b      	ldrh	r3, [r3, #28]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	e007      	b.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x2a4>
 8000cd8:	200002b0 	.word	0x200002b0
 8000cdc:	20000268 	.word	0x20000268
 8000ce0:	20000030 	.word	0x20000030
 8000ce4:	20000208 	.word	0x20000208
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000cee:	839a      	strh	r2, [r3, #28]
		freq[14] = FreqCalculate(14, &htim5);
 8000cf0:	4912      	ldr	r1, [pc, #72]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000cf2:	200e      	movs	r0, #14
 8000cf4:	f000 f828 	bl	8000d48 <FreqCalculate>
 8000cf8:	eef0 7a40 	vmov.f32	s15, s0
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cfe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	}
	if (GPIO_Pin == SENSOR16_Pin) {
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000d08:	d112      	bne.n	8000d30 <HAL_GPIO_EXTI_Callback+0x2ec>
		// ação desejada, por exemplo, incrementar contador
		cont_zero[15] = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x300>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
		cont_seed[15]++;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000d12:	8bdb      	ldrh	r3, [r3, #30]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000d1c:	83da      	strh	r2, [r3, #30]
		freq[15] = FreqCalculate(15, &htim5);
 8000d1e:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000d20:	200f      	movs	r0, #15
 8000d22:	f000 f811 	bl	8000d48 <FreqCalculate>
 8000d26:	eef0 7a40 	vmov.f32	s15, s0
 8000d2a:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000268 	.word	0x20000268
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	20000208 	.word	0x20000208
 8000d44:	200002b0 	.word	0x200002b0

08000d48 <FreqCalculate>:

float FreqCalculate(uint32_t sensor_index, TIM_HandleTypeDef *htim) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	if (sensor_index >= 16) // verificação de estouro de index
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d902      	bls.n	8000d5e <FreqCalculate+0x16>
		return 0.0f;
 8000d58:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8000dd4 <FreqCalculate+0x8c>
 8000d5c:	e034      	b.n	8000dc8 <FreqCalculate+0x80>

	uint32_t current_tick = __HAL_TIM_GET_COUNTER(htim);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d64:	60bb      	str	r3, [r7, #8]
	uint32_t delta;

	if (current_tick >= last_tick[sensor_index])
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <FreqCalculate+0x90>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d307      	bcc.n	8000d84 <FreqCalculate+0x3c>
		delta = current_tick - last_tick[sensor_index];
 8000d74:	4a18      	ldr	r2, [pc, #96]	@ (8000dd8 <FreqCalculate+0x90>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e006      	b.n	8000d92 <FreqCalculate+0x4a>
	else
		delta = (0xFFFFFFFF - last_tick[sensor_index]) + current_tick + 1;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <FreqCalculate+0x90>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	60fb      	str	r3, [r7, #12]

	last_tick[sensor_index] = current_tick;
 8000d92:	4911      	ldr	r1, [pc, #68]	@ (8000dd8 <FreqCalculate+0x90>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (delta == 0) {
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <FreqCalculate+0x60>
		return 0.0f;
 8000da2:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8000dd4 <FreqCalculate+0x8c>
 8000da6:	e00f      	b.n	8000dc8 <FreqCalculate+0x80>
	}

	return (HAL_RCC_GetPCLK1Freq() * 2) / ((htim->Init.Prescaler + 1) * delta); // retorna frequencia
 8000da8:	f001 ff0c 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8000dac:	4603      	mov	r3, r0
 8000dae:	005a      	lsls	r2, r3, #1
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	fb01 f303 	mul.w	r3, r1, r3
 8000dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8000dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	00000000 	.word	0x00000000
 8000dd8:	200001c8 	.word	0x200001c8

08000ddc <HAL_UARTEx_RxEventCallback>:

//-----------------------Tratativas de recebimento de mensagem e envio -------------------------------------------------
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART1) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d15c      	bne.n	8000eac <HAL_UARTEx_RxEventCallback+0xd0>

		HAL_UART_AbortReceive(&huart1);
 8000df2:	4831      	ldr	r0, [pc, #196]	@ (8000eb8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000df4:	f002 fcd0 	bl	8003798 <HAL_UART_AbortReceive>
		uint8_t message_size = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
		uint8_t capture = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73bb      	strb	r3, [r7, #14]

		for (uint16_t i = 0; i < Size; i++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	81bb      	strh	r3, [r7, #12]
 8000e04:	e035      	b.n	8000e72 <HAL_UARTEx_RxEventCallback+0x96>
			uint8_t byte = bufferRx[i];
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	4a2c      	ldr	r2, [pc, #176]	@ (8000ebc <HAL_UARTEx_RxEventCallback+0xe0>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	72fb      	strb	r3, [r7, #11]

			if (byte == '@')  // Detecta início da mensagem
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	2b40      	cmp	r3, #64	@ 0x40
 8000e12:	d103      	bne.n	8000e1c <HAL_UARTEx_RxEventCallback+0x40>
					{
				message_size = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
				capture = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73bb      	strb	r3, [r7, #14]
			}
			if (capture)  // Captura mensagem até o finalizador '\n'
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d024      	beq.n	8000e6c <HAL_UARTEx_RxEventCallback+0x90>
			{
				if (byte == '\n' && message_size == message_RX[2] + 3) {
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	2b0a      	cmp	r3, #10
 8000e26:	d117      	bne.n	8000e58 <HAL_UARTEx_RxEventCallback+0x7c>
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	3303      	adds	r3, #3
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d111      	bne.n	8000e58 <HAL_UARTEx_RxEventCallback+0x7c>
					capture = 0;  // Para captura
 8000e34:	2300      	movs	r3, #0
 8000e36:	73bb      	strb	r3, [r7, #14]
					message_RX[message_size++] = byte; // inclusão do \n na mensagem
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	73fa      	strb	r2, [r7, #15]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	5453      	strb	r3, [r2, r1]
					handles_BLE_message(message_RX, message_size); // Processa a mensagem
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481c      	ldr	r0, [pc, #112]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e4e:	f000 f839 	bl	8000ec4 <handles_BLE_message>
					clean_buffer_rx_BLE();
 8000e52:	f000 f8b1 	bl	8000fb8 <clean_buffer_rx_BLE>
 8000e56:	e009      	b.n	8000e6c <HAL_UARTEx_RxEventCallback+0x90>
				} else if (message_size < buffer_size - 1) // Evita overflow
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b26      	cmp	r3, #38	@ 0x26
 8000e5c:	d806      	bhi.n	8000e6c <HAL_UARTEx_RxEventCallback+0x90>
						{
					message_RX[message_size++] = byte;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	73fa      	strb	r2, [r7, #15]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000e68:	7afb      	ldrb	r3, [r7, #11]
 8000e6a:	5453      	strb	r3, [r2, r1]
		for (uint16_t i = 0; i < Size; i++) {
 8000e6c:	89bb      	ldrh	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	81bb      	strh	r3, [r7, #12]
 8000e72:	89ba      	ldrh	r2, [r7, #12]
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3c5      	bcc.n	8000e06 <HAL_UARTEx_RxEventCallback+0x2a>
				}
			}
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bufferRx,
 8000e7a:	2228      	movs	r2, #40	@ 0x28
 8000e7c:	490f      	ldr	r1, [pc, #60]	@ (8000ebc <HAL_UARTEx_RxEventCallback+0xe0>)
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000e80:	f002 fc31 	bl	80036e6 <HAL_UARTEx_ReceiveToIdle_DMA>
		buffer_size);
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT); // Desativa interrupção de Half Transfer (opcional)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0208 	bic.w	r2, r2, #8
 8000e96:	601a      	str	r2, [r3, #0]
		__HAL_DMA_ENABLE_IT(huart->hdmarx, DMA_IT_TC); // Mantém interrupção de Transfer Complete
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0210 	orr.w	r2, r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]
	}
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	200002f0 	.word	0x200002f0
 8000ec0:	20000318 	.word	0x20000318

08000ec4 <handles_BLE_message>:

void handles_BLE_message(uint8_t message[], uint16_t size) {
 8000ec4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000ec8:	b089      	sub	sp, #36	@ 0x24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	807b      	strh	r3, [r7, #2]

	if (size == message[2] + 4) {
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d160      	bne.n	8000fa2 <handles_BLE_message+0xde>
 8000ee0:	466b      	mov	r3, sp
 8000ee2:	4618      	mov	r0, r3
		uint8_t id = message[1];
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	75fb      	strb	r3, [r7, #23]
		uint8_t dlc = message[2];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	75bb      	strb	r3, [r7, #22]
		uint8_t message_BLE[dlc];
 8000ef0:	7db9      	ldrb	r1, [r7, #22]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	b2cb      	uxtb	r3, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	4698      	mov	r8, r3
 8000efe:	4691      	mov	r9, r2
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f14:	b2cb      	uxtb	r3, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	461c      	mov	r4, r3
 8000f1a:	4615      	mov	r5, r2
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	00eb      	lsls	r3, r5, #3
 8000f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f2a:	00e2      	lsls	r2, r4, #3
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	3307      	adds	r3, #7
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	ebad 0d03 	sub.w	sp, sp, r3
 8000f38:	466b      	mov	r3, sp
 8000f3a:	3300      	adds	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]

		for (int i = 3, j = 0; i < dlc + 2; i++, j++) {
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	e00e      	b.n	8000f66 <handles_BLE_message+0xa2>
			message_BLE[j] = message[i];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	7819      	ldrb	r1, [r3, #0]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
		for (int i = 3, j = 0; i < dlc + 2; i++, j++) {
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	ddeb      	ble.n	8000f48 <handles_BLE_message+0x84>
		}
		//Tratamento das mensagens recebidas

		if (id == 3) {
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d108      	bne.n	8000f88 <handles_BLE_message+0xc4>

			temp_send_seed = ((message_BLE[0] << 8) | message_BLE[1]);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	7852      	ldrb	r2, [r2, #1]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <handles_BLE_message+0xec>)
 8000f86:	601a      	str	r2, [r3, #0]
		}
		if (id == 4) {
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d108      	bne.n	8000fa0 <handles_BLE_message+0xdc>

			temp_send_freq = ((message_BLE[0] << 8) | message_BLE[1]);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	7852      	ldrb	r2, [r2, #1]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <handles_BLE_message+0xf0>)
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4685      	mov	sp, r0
		}
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <clean_buffer_rx_BLE>:

void clean_buffer_rx_BLE() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	 memset(bufferRx,  0, sizeof(bufferRx));
 8000fbc:	2228      	movs	r2, #40	@ 0x28
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <clean_buffer_rx_BLE+0x1c>)
 8000fc2:	f003 f9a7 	bl	8004314 <memset>
	 memset(message_RX, 0, sizeof(message_RX));
 8000fc6:	2228      	movs	r2, #40	@ 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <clean_buffer_rx_BLE+0x20>)
 8000fcc:	f003 f9a2 	bl	8004314 <memset>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002f0 	.word	0x200002f0
 8000fd8:	20000318 	.word	0x20000318

08000fdc <send_uart_TX>:

void send_uart_TX(uint8_t id, uint8_t dlc, uint8_t data[]) {
 8000fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	603a      	str	r2, [r7, #0]
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	466b      	mov	r3, sp
 8000ff0:	461e      	mov	r6, r3

	uint8_t buffer_BLE_tx[dlc + 4];
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	1d19      	adds	r1, r3, #4
 8000ff6:	1e4b      	subs	r3, r1, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4690      	mov	r8, r2
 8001000:	4699      	mov	r9, r3
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800100e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001016:	460a      	mov	r2, r1
 8001018:	2300      	movs	r3, #0
 800101a:	4614      	mov	r4, r2
 800101c:	461d      	mov	r5, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	00eb      	lsls	r3, r5, #3
 8001028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800102c:	00e2      	lsls	r2, r4, #3
 800102e:	460b      	mov	r3, r1
 8001030:	3307      	adds	r3, #7
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	ebad 0d03 	sub.w	sp, sp, r3
 800103a:	466b      	mov	r3, sp
 800103c:	3300      	adds	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]

	buffer_BLE_tx[0] = '@';
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2240      	movs	r2, #64	@ 0x40
 8001044:	701a      	strb	r2, [r3, #0]
	buffer_BLE_tx[1] = id;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	705a      	strb	r2, [r3, #1]
	buffer_BLE_tx[2] = dlc;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	709a      	strb	r2, [r3, #2]
	for (int i = 3, j = 0; i < dlc + 3; i++, j++) {
 8001052:	2303      	movs	r3, #3
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	e00e      	b.n	800107a <send_uart_TX+0x9e>
		buffer_BLE_tx[i] = data[j];
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
	for (int i = 3, j = 0; i < dlc + 3; i++, j++) {
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	3301      	adds	r3, #1
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	3302      	adds	r3, #2
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	ddeb      	ble.n	800105c <send_uart_TX+0x80>
	}
	buffer_BLE_tx[dlc + 3] = '\n';
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	3303      	adds	r3, #3
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	210a      	movs	r1, #10
 800108c:	54d1      	strb	r1, [r2, r3]

// Envia via DMA com FIFO
	HAL_UART_Transmit(&huart1, buffer_BLE_tx, dlc + 4, 20);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3304      	adds	r3, #4
 8001094:	b29a      	uxth	r2, r3
 8001096:	2314      	movs	r3, #20
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <send_uart_TX+0xd0>)
 800109c:	f002 fa98 	bl	80035d0 <HAL_UART_Transmit>
 80010a0:	46b5      	mov	sp, r6
	//UART_Send_DMA(buffer_BLE_tx, dlc + 4);
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ac:	200000c0 	.word	0x200000c0

080010b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

//-------------------- FUNÇÃO DE TIMER--------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d130      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x74>
		// Código a executar no estouro do timer
		if (cont_send_seed < temp_send_seed + 2) {
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1c9a      	adds	r2, r3, #2
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d904      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0x2a>
			cont_send_seed++;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010d8:	6013      	str	r3, [r2, #0]
		}
		if (cont_send_freq < temp_send_freq + 2) {
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1c9a      	adds	r2, r3, #2
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d904      	bls.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x42>
			cont_send_freq++;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010f0:	6013      	str	r3, [r2, #0]
		}
		for (int i = 0; i < 16; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e012      	b.n	800111e <HAL_TIM_PeriodElapsedCallback+0x6e>
			if (cont_zero[i] < 502) {
 80010f8:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8001104:	d208      	bcs.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x68>
				cont_zero[i]++;
 8001106:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 16; i++) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	dde9      	ble.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x48>
			}
		}
	}
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40014400 	.word	0x40014400
 8001134:	20000000 	.word	0x20000000
 8001138:	200002a8 	.word	0x200002a8
 800113c:	20000004 	.word	0x20000004
 8001140:	200002ac 	.word	0x200002ac
 8001144:	200002b0 	.word	0x200002b0

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <HAL_TIM_Base_MspInit+0x70>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10e      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a16      	ldr	r2, [pc, #88]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011d2:	e01a      	b.n	800120a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d115      	bne.n	800120a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2019      	movs	r0, #25
 8001200:	f000 faf1 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001204:	2019      	movs	r0, #25
 8001206:	f000 fb0a 	bl	800181e <HAL_NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40000c00 	.word	0x40000c00
 8001218:	40023800 	.word	0x40023800
 800121c:	40014400 	.word	0x40014400

08001220 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_UART_MspInit+0x154>)
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 8093 	bne.w	800136a <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124c:	4a4a      	ldr	r2, [pc, #296]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6453      	str	r3, [r2, #68]	@ 0x44
 8001254:	4b48      	ldr	r3, [pc, #288]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800127c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128e:	2307      	movs	r3, #7
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4838      	ldr	r0, [pc, #224]	@ (800137c <HAL_UART_MspInit+0x15c>)
 800129a:	f000 fec7 	bl	800202c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800129e:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012a0:	4a38      	ldr	r2, [pc, #224]	@ (8001384 <HAL_UART_MspInit+0x164>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012a4:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012dc:	2204      	movs	r2, #4
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012ec:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012f2:	4823      	ldr	r0, [pc, #140]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012f4:	f000 faae 	bl	8001854 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80012fe:	f7ff ff23 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1e      	ldr	r2, [pc, #120]	@ (8001380 <HAL_UART_MspInit+0x160>)
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001308:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_UART_MspInit+0x160>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_UART_MspInit+0x16c>)
 8001312:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800131a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800131e:	2240      	movs	r2, #64	@ 0x40
 8001320:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800132a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001350:	f000 fa80 	bl	8001854 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800135a:	f7ff fef5 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001362:	639a      	str	r2, [r3, #56]	@ 0x38
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000
 8001380:	20000108 	.word	0x20000108
 8001384:	40026440 	.word	0x40026440
 8001388:	20000168 	.word	0x20000168
 800138c:	400264b8 	.word	0x400264b8

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 f903 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR1_Pin);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 ff9e 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR2_Pin);
 8001400:	2002      	movs	r0, #2
 8001402:	f000 ff97 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR3_Pin);
 800140e:	2004      	movs	r0, #4
 8001410:	f000 ff90 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR4_Pin);
 800141c:	2008      	movs	r0, #8
 800141e:	f000 ff89 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR5_Pin);
 800142a:	2010      	movs	r0, #16
 800142c:	f000 ff82 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR6_Pin);
 8001438:	2020      	movs	r0, #32
 800143a:	f000 ff7b 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR7_Pin);
 800143e:	2040      	movs	r0, #64	@ 0x40
 8001440:	f000 ff78 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR8_Pin);
 8001444:	2080      	movs	r0, #128	@ 0x80
 8001446:	f000 ff75 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR9_Pin);
 800144a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800144e:	f000 ff71 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR10_Pin);
 8001452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001456:	f000 ff6d 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001466:	f001 fce1 	bl	8002e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000078 	.word	0x20000078

08001474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR11_Pin);
 8001478:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800147c:	f000 ff5a 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR12_Pin);
 8001480:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001484:	f000 ff56 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR13_Pin);
 8001488:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800148c:	f000 ff52 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR14_Pin);
 8001490:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001494:	f000 ff4e 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR15_Pin);
 8001498:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800149c:	f000 ff4a 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR16_Pin);
 80014a0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80014a4:	f000 ff46 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <DMA2_Stream2_IRQHandler+0x10>)
 80014b2:	f000 fb45 	bl	8001b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000108 	.word	0x20000108

080014c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <DMA2_Stream7_IRQHandler+0x10>)
 80014c6:	f000 fb3b 	bl	8001b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000168 	.word	0x20000168

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001530 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fc:	f7ff ffea 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	@ (8001538 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	@ (8001544 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 fefd 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7fe ffeb 	bl	8000504 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800153c:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8001540:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001544:	20000344 	.word	0x20000344

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	@ (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f92b 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fde8 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f943 	bl	800183a <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f90b 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000010 	.word	0x20000010
 80015ec:	2000000c 	.word	0x2000000c

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000010 	.word	0x20000010
 8001614:	20000340 	.word	0x20000340

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000340 	.word	0x20000340

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff feda 	bl	8001618 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e099      	b.n	80019a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001890:	e00f      	b.n	80018b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001892:	f7ff fec1 	bl	8001618 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b05      	cmp	r3, #5
 800189e:	d908      	bls.n	80018b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e078      	b.n	80019a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e8      	bne.n	8001892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_DMA_Init+0x158>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	4313      	orrs	r3, r2
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f023 0307 	bic.w	r3, r3, #7
 8001932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b04      	cmp	r3, #4
 8001944:	d117      	bne.n	8001976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 faeb 	bl	8001f34 <DMA_CheckFifoParam>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2240      	movs	r2, #64	@ 0x40
 8001968:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001972:	2301      	movs	r3, #1
 8001974:	e016      	b.n	80019a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 faa2 	bl	8001ec8 <DMA_CalcBaseAndBitshift>
 8001984:	4603      	mov	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198c:	223f      	movs	r2, #63	@ 0x3f
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	f010803f 	.word	0xf010803f

080019b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_DMA_Start_IT+0x26>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e040      	b.n	8001a58 <HAL_DMA_Start_IT+0xa8>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d12f      	bne.n	8001a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2202      	movs	r2, #2
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa34 	bl	8001e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	223f      	movs	r2, #63	@ 0x3f
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0216 	orr.w	r2, r2, #22
 8001a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0208 	orr.w	r2, r2, #8
 8001a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e005      	b.n	8001a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	f7ff fdd3 	bl	8001618 <HAL_GetTick>
 8001a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e052      	b.n	8001b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0216 	bic.w	r2, r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_DMA_Abort+0x62>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0208 	bic.w	r2, r2, #8
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	e013      	b.n	8001b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae4:	f7ff fd98 	bl	8001618 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d90c      	bls.n	8001b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e015      	b.n	8001b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e4      	bne.n	8001ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	223f      	movs	r2, #63	@ 0x3f
 8001b20:	409a      	lsls	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d88 <HAL_DMA_IRQHandler+0x248>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a8e      	ldr	r2, [pc, #568]	@ (8001d8c <HAL_DMA_IRQHandler+0x24c>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	2208      	movs	r2, #8
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	2204      	movs	r2, #4
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c04:	2204      	movs	r2, #4
 8001c06:	409a      	lsls	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d043      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03c      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d018      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d024      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
 8001c6e:	e01f      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
 8001c80:	e016      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0208 	bic.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 808f 	beq.w	8001de0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8087 	beq.w	8001de0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d136      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0216 	bic.w	r2, r2, #22
 8001cf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x1da>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0208 	bic.w	r2, r2, #8
 8001d28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	223f      	movs	r2, #63	@ 0x3f
 8001d30:	409a      	lsls	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d07e      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
        }
        return;
 8001d56:	e079      	b.n	8001e4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01d      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d031      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
 8001d84:	e02c      	b.n	8001de0 <HAL_DMA_IRQHandler+0x2a0>
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
 8001da0:	e01e      	b.n	8001de0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0210 	bic.w	r2, r2, #16
 8001dbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d032      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d022      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2205      	movs	r2, #5
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d307      	bcc.n	8001e28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f2      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x2cc>
 8001e26:	e000      	b.n	8001e2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
 8001e4a:	e000      	b.n	8001e4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e4c:	bf00      	nop
    }
  }
}
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d108      	bne.n	8001eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eaa:	e007      	b.n	8001ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b10      	subs	r3, #16
 8001ed8:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <DMA_CalcBaseAndBitshift+0x64>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d909      	bls.n	8001f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f08:	e007      	b.n	8001f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	aaaaaaab 	.word	0xaaaaaaab
 8001f30:	080043f8 	.word	0x080043f8

08001f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d856      	bhi.n	8002002 <DMA_CheckFifoParam+0xce>
 8001f54:	a201      	add	r2, pc, #4	@ (adr r2, 8001f5c <DMA_CheckFifoParam+0x28>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7f 	.word	0x08001f7f
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08002003 	.word	0x08002003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e043      	b.n	8002006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f86:	d140      	bne.n	800200a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8c:	e03d      	b.n	800200a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f96:	d121      	bne.n	8001fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d837      	bhi.n	800200e <DMA_CheckFifoParam+0xda>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <DMA_CheckFifoParam+0x70>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbb 	.word	0x08001fbb
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	08001fcd 	.word	0x08001fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e030      	b.n	800201c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e022      	b.n	8002012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fda:	e01c      	b.n	8002016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d903      	bls.n	8001fea <DMA_CheckFifoParam+0xb6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe8:	e018      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;
 8001fee:	e015      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e00b      	b.n	800201a <DMA_CheckFifoParam+0xe6>
      break;
 8002002:	bf00      	nop
 8002004:	e00a      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e008      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e006      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e004      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;   
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
    }
  } 
  
  return status; 
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e159      	b.n	80022fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8148 	bne.w	80022f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a2 	beq.w	80022f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b57      	ldr	r3, [pc, #348]	@ (8002314 <HAL_GPIO_Init+0x2e8>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	4a56      	ldr	r2, [pc, #344]	@ (8002314 <HAL_GPIO_Init+0x2e8>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c2:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <HAL_GPIO_Init+0x2e8>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <HAL_GPIO_Init+0x2ec>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a49      	ldr	r2, [pc, #292]	@ (800231c <HAL_GPIO_Init+0x2f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x202>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a48      	ldr	r2, [pc, #288]	@ (8002320 <HAL_GPIO_Init+0x2f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x1fe>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a47      	ldr	r2, [pc, #284]	@ (8002324 <HAL_GPIO_Init+0x2f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x1fa>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a46      	ldr	r2, [pc, #280]	@ (8002328 <HAL_GPIO_Init+0x2fc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x1f6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a45      	ldr	r2, [pc, #276]	@ (800232c <HAL_GPIO_Init+0x300>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x1f2>
 800221a:	2304      	movs	r3, #4
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x204>
 800221e:	2307      	movs	r3, #7
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x204>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x204>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x204>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x204>
 800222e:	2300      	movs	r3, #0
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	@ (8002318 <HAL_GPIO_Init+0x2ec>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224e:	4b38      	ldr	r3, [pc, #224]	@ (8002330 <HAL_GPIO_Init+0x304>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002272:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <HAL_GPIO_Init+0x304>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002278:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <HAL_GPIO_Init+0x304>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800229c:	4a24      	ldr	r2, [pc, #144]	@ (8002330 <HAL_GPIO_Init+0x304>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a2:	4b23      	ldr	r3, [pc, #140]	@ (8002330 <HAL_GPIO_Init+0x304>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002330 <HAL_GPIO_Init+0x304>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_GPIO_Init+0x304>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002330 <HAL_GPIO_Init+0x304>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	f67f aea2 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40013800 	.word	0x40013800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800233e:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fb76 	bl	8000a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e267      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002382:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b85      	ldr	r3, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002396:	2b08      	cmp	r3, #8
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b82      	ldr	r3, [pc, #520]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e242      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6f      	ldr	r2, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6c      	ldr	r2, [pc, #432]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4b69      	ldr	r3, [pc, #420]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a68      	ldr	r2, [pc, #416]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff f8fc 	bl	8001618 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff f8f8 	bl	8001618 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e207      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff f8e8 	bl	8001618 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f8e4 	bl	8001618 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1f3      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b51      	ldr	r3, [pc, #324]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c7      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4937      	ldr	r1, [pc, #220]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <HAL_RCC_OscConfig+0x244>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f89d 	bl	8001618 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f899 	bl	8001618 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a8      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4925      	ldr	r1, [pc, #148]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x244>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff f87c 	bl	8001618 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff f878 	bl	8001618 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e187      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d036      	beq.n	80025bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_RCC_OscConfig+0x248>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff f85c 	bl	8001618 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7ff f858 	bl	8001618 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e167      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
 8002582:	e01b      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RCC_OscConfig+0x248>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7ff f845 	bl	8001618 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e00e      	b.n	80025b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002592:	f7ff f841 	bl	8001618 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d907      	bls.n	80025b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e150      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ea      	bne.n	8002592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8097 	beq.w	80026f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a7c      	ldr	r2, [pc, #496]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b77      	ldr	r3, [pc, #476]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b74      	ldr	r3, [pc, #464]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff f801 	bl	8001618 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fffd 	bl	8001618 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e10c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x2ea>
 8002640:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a63      	ldr	r2, [pc, #396]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x30c>
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	4a5e      	ldr	r2, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	@ 0x70
 8002662:	4b5c      	ldr	r3, [pc, #368]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a5b      	ldr	r2, [pc, #364]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
 800267c:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a54      	ldr	r2, [pc, #336]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe ffc2 	bl	8001618 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe ffbe 	bl	8001618 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0cb      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4b49      	ldr	r3, [pc, #292]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RCC_OscConfig+0x334>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe ffac 	bl	8001618 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe ffa8 	bl	8001618 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0b5      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	4a38      	ldr	r2, [pc, #224]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a1 	beq.w	8002844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d05c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d141      	bne.n	800279a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ff7c 	bl	8001618 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe ff78 	bl	8001618 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e087      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe ff51 	bl	8001618 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe ff4d 	bl	8001618 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e05c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x416>
 8002798:	e054      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff3a 	bl	8001618 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe ff36 	bl	8001618 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e045      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x444>
 80027c6:	e03d      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d028      	beq.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d121      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d11a      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fe68 	bl	8001618 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fe64 	bl	8001618 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fdc8 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	080043e0 	.word	0x080043e0
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b090      	sub	sp, #64	@ 0x40
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80a1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e09b      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a58:	e09b      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a5e:	e098      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	fb03 f201 	mul.w	r2, r3, r1
 8002a90:	2300      	movs	r3, #0
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	4a43      	ldr	r2, [pc, #268]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa6:	4413      	add	r3, r2
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aac:	2200      	movs	r2, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	61fa      	str	r2, [r7, #28]
 8002ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002aba:	f7fd fb8d 	bl	80001d8 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac6:	e053      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b35      	ldr	r3, [pc, #212]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	617a      	str	r2, [r7, #20]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	4652      	mov	r2, sl
 8002ae0:	465b      	mov	r3, fp
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ebb2 080a 	subs.w	r8, r2, sl
 8002afa:	eb63 090b 	sbc.w	r9, r3, fp
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b12:	ebb2 0408 	subs.w	r4, r2, r8
 8002b16:	eb63 0509 	sbc.w	r5, r3, r9
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	00eb      	lsls	r3, r5, #3
 8002b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b28:	00e2      	lsls	r2, r4, #3
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	eb14 030a 	adds.w	r3, r4, sl
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	eb45 030b 	adc.w	r3, r5, fp
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	60fa      	str	r2, [r7, #12]
 8002b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b64:	f7fd fb38 	bl	80001d8 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3740      	adds	r7, #64	@ 0x40
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000008 	.word	0x20000008

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	080043f0 	.word	0x080043f0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	080043f0 	.word	0x080043f0

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e041      	b.n	8002caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fab2 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 faca 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e03c      	b.n	8002d46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d54 <HAL_TIM_Base_Start+0xa0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_TIM_Base_Start+0x5c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce6:	d013      	beq.n	8002d10 <HAL_TIM_Base_Start+0x5c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	@ (8002d58 <HAL_TIM_Base_Start+0xa4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_TIM_Base_Start+0x5c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a19      	ldr	r2, [pc, #100]	@ (8002d5c <HAL_TIM_Base_Start+0xa8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_TIM_Base_Start+0x5c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <HAL_TIM_Base_Start+0xac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_TIM_Base_Start+0x5c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <HAL_TIM_Base_Start+0xb0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d111      	bne.n	8002d34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d010      	beq.n	8002d44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	e007      	b.n	8002d44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40014000 	.word	0x40014000

08002d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e044      	b.n	8002e0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e18 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002daa:	d013      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e1c <HAL_TIM_Base_Start_IT+0xb4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a19      	ldr	r2, [pc, #100]	@ (8002e20 <HAL_TIM_Base_Start_IT+0xb8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <HAL_TIM_Base_Start_IT+0xc0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d010      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	e007      	b.n	8002e08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40014000 	.word	0x40014000

08002e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d020      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f999 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f98b 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f99c 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0204 	mvn.w	r2, #4
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f973 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f965 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f976 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0208 	mvn.w	r2, #8
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2204      	movs	r2, #4
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f94d 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f93f 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f950 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d020      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0210 	mvn.w	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f927 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f919 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f92a 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe f88c 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fab0 	bl	800351c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8fb 	bl	80031d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa82 	bl	8003508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIM_ConfigClockSource+0x1c>
 8003024:	2302      	movs	r3, #2
 8003026:	e0b4      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x186>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800304e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003060:	d03e      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003066:	f200 8087 	bhi.w	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306e:	f000 8086 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x172>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003076:	d87f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b70      	cmp	r3, #112	@ 0x70
 800307a:	d01a      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xa6>
 800307c:	2b70      	cmp	r3, #112	@ 0x70
 800307e:	d87b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b60      	cmp	r3, #96	@ 0x60
 8003082:	d050      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x11a>
 8003084:	2b60      	cmp	r3, #96	@ 0x60
 8003086:	d877      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b50      	cmp	r3, #80	@ 0x50
 800308a:	d03c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xfa>
 800308c:	2b50      	cmp	r3, #80	@ 0x50
 800308e:	d873      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d058      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x13a>
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d86f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b30      	cmp	r3, #48	@ 0x30
 800309a:	d064      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b30      	cmp	r3, #48	@ 0x30
 800309e:	d86b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d060      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d867      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d05a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	e062      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c2:	f000 f993 	bl	80033ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	609a      	str	r2, [r3, #8]
      break;
 80030de:	e04f      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	f000 f97c 	bl	80033ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e03c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	461a      	mov	r2, r3
 8003114:	f000 f8f0 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2150      	movs	r1, #80	@ 0x50
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f949 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003124:	e02c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003132:	461a      	mov	r2, r3
 8003134:	f000 f90f 	bl	8003356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2160      	movs	r1, #96	@ 0x60
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f939 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003144:	e01c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8d0 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2140      	movs	r1, #64	@ 0x40
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f929 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003164:	e00c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 f920 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003176:	e003      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e000      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800317e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a37      	ldr	r2, [pc, #220]	@ (80032dc <TIM_Base_SetConfig+0xf0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0x38>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0x38>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a34      	ldr	r2, [pc, #208]	@ (80032e0 <TIM_Base_SetConfig+0xf4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0x38>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a33      	ldr	r2, [pc, #204]	@ (80032e4 <TIM_Base_SetConfig+0xf8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0x38>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a32      	ldr	r2, [pc, #200]	@ (80032e8 <TIM_Base_SetConfig+0xfc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <TIM_Base_SetConfig+0xf0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01b      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003244:	d017      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a25      	ldr	r2, [pc, #148]	@ (80032e0 <TIM_Base_SetConfig+0xf4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a24      	ldr	r2, [pc, #144]	@ (80032e4 <TIM_Base_SetConfig+0xf8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00f      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a23      	ldr	r2, [pc, #140]	@ (80032e8 <TIM_Base_SetConfig+0xfc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <TIM_Base_SetConfig+0x100>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a21      	ldr	r2, [pc, #132]	@ (80032f0 <TIM_Base_SetConfig+0x104>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a20      	ldr	r2, [pc, #128]	@ (80032f4 <TIM_Base_SetConfig+0x108>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <TIM_Base_SetConfig+0xf0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d103      	bne.n	80032b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f023 0210 	bic.w	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f043 0307 	orr.w	r3, r3, #7
 80033d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	431a      	orrs	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e050      	b.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003490:	d013      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10c      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40014000 	.word	0x40014000

08003508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e042      	b.n	80035c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd fe62 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	@ 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fc59 	bl	8003e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	@ 0x28
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d175      	bne.n	80036dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_UART_Transmit+0x2c>
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e06e      	b.n	80036de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2221      	movs	r2, #33	@ 0x21
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800360e:	f7fe f803 	bl	8001618 <HAL_GetTick>
 8003612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d108      	bne.n	800363c <HAL_UART_Transmit+0x6c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e003      	b.n	8003644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003644:	e02e      	b.n	80036a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2180      	movs	r1, #128	@ 0x80
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa60 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e03a      	b.n	80036de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	3302      	adds	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e007      	b.n	8003696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1cb      	bne.n	8003646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2140      	movs	r1, #64	@ 0x40
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fa2c 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e006      	b.n	80036de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08c      	sub	sp, #48	@ 0x30
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d146      	bne.n	800378e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e03f      	b.n	8003790 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	461a      	mov	r2, r3
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa50 	bl	8003bc8 <UART_Start_Receive_DMA>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	2b01      	cmp	r3, #1
 8003734:	d125      	bne.n	8003782 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	617b      	str	r3, [r7, #20]
   return(result);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800376c:	627a      	str	r2, [r7, #36]	@ 0x24
 800376e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6a39      	ldr	r1, [r7, #32]
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	61fb      	str	r3, [r7, #28]
   return(result);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003780:	e002      	b.n	8003788 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800378c:	e000      	b.n	8003790 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	@ 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b09a      	sub	sp, #104	@ 0x68
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80037c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80037c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80037ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d136      	bne.n	80038c0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3314      	adds	r3, #20
 8003858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	60bb      	str	r3, [r7, #8]
   return(result);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003868:	65bb      	str	r3, [r7, #88]	@ 0x58
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003872:	61ba      	str	r2, [r7, #24]
 8003874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	613b      	str	r3, [r7, #16]
   return(result);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e5      	bne.n	8003852 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	2200      	movs	r2, #0
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe f8e0 	bl	8001a60 <HAL_DMA_Abort>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fad2 	bl	8001e54 <HAL_DMA_GetError>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d104      	bne.n	80038c0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2210      	movs	r2, #16
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e00a      	b.n	80038d6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3768      	adds	r7, #104	@ 0x68
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b09c      	sub	sp, #112	@ 0x70
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d172      	bne.n	8003a1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003938:	2200      	movs	r2, #0
 800393a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800394c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800394e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800395c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800395e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800396a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	667b      	str	r3, [r7, #100]	@ 0x64
 8003988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003990:	647a      	str	r2, [r7, #68]	@ 0x44
 8003992:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800399e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	623b      	str	r3, [r7, #32]
   return(result);
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80039bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80039c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e5      	bne.n	80039a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d119      	bne.n	8003a1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0310 	bic.w	r3, r3, #16
 80039fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a08:	61fa      	str	r2, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	617b      	str	r3, [r7, #20]
   return(result);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e5      	bne.n	80039e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1e:	2200      	movs	r2, #0
 8003a20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d106      	bne.n	8003a38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a32:	f7fd f9d3 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a36:	e002      	b.n	8003a3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a3a:	f7ff ff50 	bl	80038de <HAL_UART_RxCpltCallback>
}
 8003a3e:	bf00      	nop
 8003a40:	3770      	adds	r7, #112	@ 0x70
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7fd f9b5 	bl	8000ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a72:	e002      	b.n	8003a7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff ff3c 	bl	80038f2 <HAL_UART_RxHalfCpltCallback>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b21      	cmp	r3, #33	@ 0x21
 8003ab4:	d108      	bne.n	8003ac8 <UART_DMAError+0x46>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003ac2:	68b8      	ldr	r0, [r7, #8]
 8003ac4:	f000 f926 	bl	8003d14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b22      	cmp	r3, #34	@ 0x22
 8003ae8:	d108      	bne.n	8003afc <UART_DMAError+0x7a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003af6:	68b8      	ldr	r0, [r7, #8]
 8003af8:	f000 f934 	bl	8003d64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f7ff fefc 	bl	8003906 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	e03b      	b.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d037      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b30:	f7fd fd72 	bl	8001618 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e03a      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d023      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b80      	cmp	r3, #128	@ 0x80
 8003b5c:	d020      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d01d      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d116      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f8eb 	bl	8003d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2208      	movs	r2, #8
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e00f      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d0b4      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b098      	sub	sp, #96	@ 0x60
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2222      	movs	r2, #34	@ 0x22
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	4a44      	ldr	r2, [pc, #272]	@ (8003d08 <UART_Start_Receive_DMA+0x140>)
 8003bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	4a43      	ldr	r2, [pc, #268]	@ (8003d0c <UART_Start_Receive_DMA+0x144>)
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	4a42      	ldr	r2, [pc, #264]	@ (8003d10 <UART_Start_Receive_DMA+0x148>)
 8003c06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c10:	f107 0308 	add.w	r3, r7, #8
 8003c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	f7fd fec2 	bl	80019b0 <HAL_DMA_Start_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2210      	movs	r2, #16
 8003c36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e05d      	b.n	8003d00 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d019      	beq.n	8003c96 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cea:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6a39      	ldr	r1, [r7, #32]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3760      	adds	r7, #96	@ 0x60
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	0800391b 	.word	0x0800391b
 8003d0c:	08003a47 	.word	0x08003a47
 8003d10:	08003a83 	.word	0x08003a83

08003d14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	@ 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	61ba      	str	r2, [r7, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6979      	ldr	r1, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003d58:	bf00      	nop
 8003d5a:	3724      	adds	r7, #36	@ 0x24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b095      	sub	sp, #84	@ 0x54
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d119      	bne.n	8003e10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfc:	61ba      	str	r2, [r7, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e1e:	bf00      	nop
 8003e20:	3754      	adds	r7, #84	@ 0x54
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e30:	b0c0      	sub	sp, #256	@ 0x100
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	68d9      	ldr	r1, [r3, #12]
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	ea40 0301 	orr.w	r3, r0, r1
 8003e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e84:	f021 010c 	bic.w	r1, r1, #12
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e92:	430b      	orrs	r3, r1
 8003e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea6:	6999      	ldr	r1, [r3, #24]
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	ea40 0301 	orr.w	r3, r0, r1
 8003eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b8f      	ldr	r3, [pc, #572]	@ (80040f8 <UART_SetConfig+0x2cc>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d005      	beq.n	8003ecc <UART_SetConfig+0xa0>
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80040fc <UART_SetConfig+0x2d0>)
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d104      	bne.n	8003ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe fe8e 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ed4:	e003      	b.n	8003ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ed6:	f7fe fe75 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003eda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	f040 810c 	bne.w	8004104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	1891      	adds	r1, r2, r2
 8003f04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f06:	415b      	adcs	r3, r3
 8003f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f0e:	4621      	mov	r1, r4
 8003f10:	eb12 0801 	adds.w	r8, r2, r1
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb43 0901 	adc.w	r9, r3, r1
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	eb18 0303 	adds.w	r3, r8, r3
 8003f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	eb49 0303 	adc.w	r3, r9, r3
 8003f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	18db      	adds	r3, r3, r3
 8003f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f60:	4613      	mov	r3, r2
 8003f62:	eb42 0303 	adc.w	r3, r2, r3
 8003f66:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f70:	f7fc f932 	bl	80001d8 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4b61      	ldr	r3, [pc, #388]	@ (8004100 <UART_SetConfig+0x2d4>)
 8003f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	011c      	lsls	r4, r3, #4
 8003f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8003faa:	4649      	mov	r1, r9
 8003fac:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc4:	4692      	mov	sl, r2
 8003fc6:	469b      	mov	fp, r3
 8003fc8:	4643      	mov	r3, r8
 8003fca:	eb1a 0303 	adds.w	r3, sl, r3
 8003fce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	18db      	adds	r3, r3, r3
 8003ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004006:	f7fc f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4611      	mov	r1, r2
 8004010:	4b3b      	ldr	r3, [pc, #236]	@ (8004100 <UART_SetConfig+0x2d4>)
 8004012:	fba3 2301 	umull	r2, r3, r3, r1
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2264      	movs	r2, #100	@ 0x64
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	1acb      	subs	r3, r1, r3
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004026:	4b36      	ldr	r3, [pc, #216]	@ (8004100 <UART_SetConfig+0x2d4>)
 8004028:	fba3 2302 	umull	r2, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004034:	441c      	add	r4, r3
 8004036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004040:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004050:	415b      	adcs	r3, r3
 8004052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004058:	4641      	mov	r1, r8
 800405a:	1851      	adds	r1, r2, r1
 800405c:	6339      	str	r1, [r7, #48]	@ 0x30
 800405e:	4649      	mov	r1, r9
 8004060:	414b      	adcs	r3, r1
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004070:	4659      	mov	r1, fp
 8004072:	00cb      	lsls	r3, r1, #3
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407a:	4651      	mov	r1, sl
 800407c:	00ca      	lsls	r2, r1, #3
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	4603      	mov	r3, r0
 8004084:	4642      	mov	r2, r8
 8004086:	189b      	adds	r3, r3, r2
 8004088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800408c:	464b      	mov	r3, r9
 800408e:	460a      	mov	r2, r1
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040ac:	460b      	mov	r3, r1
 80040ae:	18db      	adds	r3, r3, r3
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b2:	4613      	mov	r3, r2
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040c2:	f7fc f889 	bl	80001d8 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <UART_SetConfig+0x2d4>)
 80040cc:	fba3 1302 	umull	r1, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	2164      	movs	r1, #100	@ 0x64
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	3332      	adds	r3, #50	@ 0x32
 80040de:	4a08      	ldr	r2, [pc, #32]	@ (8004100 <UART_SetConfig+0x2d4>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	f003 0207 	and.w	r2, r3, #7
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4422      	add	r2, r4
 80040f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040f4:	e106      	b.n	8004304 <UART_SetConfig+0x4d8>
 80040f6:	bf00      	nop
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800410e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004116:	4642      	mov	r2, r8
 8004118:	464b      	mov	r3, r9
 800411a:	1891      	adds	r1, r2, r2
 800411c:	6239      	str	r1, [r7, #32]
 800411e:	415b      	adcs	r3, r3
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
 8004122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004126:	4641      	mov	r1, r8
 8004128:	1854      	adds	r4, r2, r1
 800412a:	4649      	mov	r1, r9
 800412c:	eb43 0501 	adc.w	r5, r3, r1
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	00eb      	lsls	r3, r5, #3
 800413a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413e:	00e2      	lsls	r2, r4, #3
 8004140:	4614      	mov	r4, r2
 8004142:	461d      	mov	r5, r3
 8004144:	4643      	mov	r3, r8
 8004146:	18e3      	adds	r3, r4, r3
 8004148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800414c:	464b      	mov	r3, r9
 800414e:	eb45 0303 	adc.w	r3, r5, r3
 8004152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004162:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004172:	4629      	mov	r1, r5
 8004174:	008b      	lsls	r3, r1, #2
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800417c:	4621      	mov	r1, r4
 800417e:	008a      	lsls	r2, r1, #2
 8004180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004184:	f7fc f828 	bl	80001d8 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4b60      	ldr	r3, [pc, #384]	@ (8004310 <UART_SetConfig+0x4e4>)
 800418e:	fba3 2302 	umull	r2, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	011c      	lsls	r4, r3, #4
 8004196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	61b9      	str	r1, [r7, #24]
 80041b0:	415b      	adcs	r3, r3
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b8:	4641      	mov	r1, r8
 80041ba:	1851      	adds	r1, r2, r1
 80041bc:	6139      	str	r1, [r7, #16]
 80041be:	4649      	mov	r1, r9
 80041c0:	414b      	adcs	r3, r1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d0:	4659      	mov	r1, fp
 80041d2:	00cb      	lsls	r3, r1, #3
 80041d4:	4651      	mov	r1, sl
 80041d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041da:	4651      	mov	r1, sl
 80041dc:	00ca      	lsls	r2, r1, #3
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	4642      	mov	r2, r8
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041ec:	464b      	mov	r3, r9
 80041ee:	460a      	mov	r2, r1
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004202:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004210:	4649      	mov	r1, r9
 8004212:	008b      	lsls	r3, r1, #2
 8004214:	4641      	mov	r1, r8
 8004216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421a:	4641      	mov	r1, r8
 800421c:	008a      	lsls	r2, r1, #2
 800421e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004222:	f7fb ffd9 	bl	80001d8 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4611      	mov	r1, r2
 800422c:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <UART_SetConfig+0x4e4>)
 800422e:	fba3 2301 	umull	r2, r3, r3, r1
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2264      	movs	r2, #100	@ 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	1acb      	subs	r3, r1, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	@ 0x32
 8004240:	4a33      	ldr	r2, [pc, #204]	@ (8004310 <UART_SetConfig+0x4e4>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	673b      	str	r3, [r7, #112]	@ 0x70
 8004256:	677a      	str	r2, [r7, #116]	@ 0x74
 8004258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	415b      	adcs	r3, r3
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429e:	464b      	mov	r3, r9
 80042a0:	460a      	mov	r2, r1
 80042a2:	eb42 0303 	adc.w	r3, r2, r3
 80042a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80042b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042c0:	4649      	mov	r1, r9
 80042c2:	008b      	lsls	r3, r1, #2
 80042c4:	4641      	mov	r1, r8
 80042c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ca:	4641      	mov	r1, r8
 80042cc:	008a      	lsls	r2, r1, #2
 80042ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042d2:	f7fb ff81 	bl	80001d8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <UART_SetConfig+0x4e4>)
 80042dc:	fba3 1302 	umull	r1, r3, r3, r2
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	2164      	movs	r1, #100	@ 0x64
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	3332      	adds	r3, #50	@ 0x32
 80042ee:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <UART_SetConfig+0x4e4>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	f003 020f 	and.w	r2, r3, #15
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4422      	add	r2, r4
 8004302:	609a      	str	r2, [r3, #8]
}
 8004304:	bf00      	nop
 8004306:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800430a:	46bd      	mov	sp, r7
 800430c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004310:	51eb851f 	.word	0x51eb851f

08004314 <memset>:
 8004314:	4402      	add	r2, r0
 8004316:	4603      	mov	r3, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	@ (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	@ (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	@ (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	@ (8004368 <__libc_init_array+0x44>)
 8004338:	f000 f846 	bl	80043c8 <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	08004408 	.word	0x08004408
 8004360:	08004408 	.word	0x08004408
 8004364:	08004408 	.word	0x08004408
 8004368:	0800440c 	.word	0x0800440c

0800436c <lroundf>:
 800436c:	ee10 1a10 	vmov	r1, s0
 8004370:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8004374:	2900      	cmp	r1, #0
 8004376:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800437a:	bfac      	ite	ge
 800437c:	2001      	movge	r0, #1
 800437e:	f04f 30ff 	movlt.w	r0, #4294967295
 8004382:	2a1e      	cmp	r2, #30
 8004384:	dc1a      	bgt.n	80043bc <lroundf+0x50>
 8004386:	2a00      	cmp	r2, #0
 8004388:	da03      	bge.n	8004392 <lroundf+0x26>
 800438a:	3201      	adds	r2, #1
 800438c:	bf18      	it	ne
 800438e:	2000      	movne	r0, #0
 8004390:	4770      	bx	lr
 8004392:	2a16      	cmp	r2, #22
 8004394:	bfd8      	it	le
 8004396:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800439a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800439e:	bfd8      	it	le
 80043a0:	4113      	asrle	r3, r2
 80043a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80043a6:	bfcd      	iteet	gt
 80043a8:	3b96      	subgt	r3, #150	@ 0x96
 80043aa:	185b      	addle	r3, r3, r1
 80043ac:	f1c2 0217 	rsble	r2, r2, #23
 80043b0:	fa01 f303 	lslgt.w	r3, r1, r3
 80043b4:	bfd8      	it	le
 80043b6:	40d3      	lsrle	r3, r2
 80043b8:	4358      	muls	r0, r3
 80043ba:	4770      	bx	lr
 80043bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80043c0:	ee17 0a90 	vmov	r0, s15
 80043c4:	4770      	bx	lr
	...

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
